{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setCountry = setCountry;\nexports.setToken = setToken;\nexports.setUserName = setUserName;\nexports.setLocation = setLocation;\nexports.setEmail = setEmail;\nexports.setUserId = setUserId;\nexports.setImage = setImage;\nexports.setProfileDescription = setProfileDescription;\nexports.RegisterPost = RegisterPost;\nexports.Login = Login;\nexports.verifyAccount = verifyAccount;\nexports.updateProfile = updateProfile;\nexports.changeProfileImage = changeProfileImage;\n\nvar _index = _interopRequireDefault(require(\"./../store/index\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _UserInformation = require(\"./UserInformation\");\n\nvar _global = require(\"../../config/global\");\n\nfunction setCountry(country) {\n  _reactNative.AsyncStorage.setItem(\"country\", JSON.stringify(country).toString());\n\n  _index.default.dispatch({\n    type: 'UPDATE_COUNTRY',\n    payload: {\n      country: country\n    }\n  });\n}\n\nfunction setToken(token) {\n  _reactNative.AsyncStorage.setItem(\"token\", token);\n\n  _index.default.dispatch({\n    type: 'UPDATE_TOKEN',\n    payload: {\n      token: token\n    }\n  });\n}\n\nfunction setUserName(username) {\n  _reactNative.AsyncStorage.setItem(\"username\", username);\n\n  _index.default.dispatch({\n    type: 'UPDATE_USERNAME',\n    payload: {\n      username: username\n    }\n  });\n}\n\nfunction setLocation(location) {\n  _reactNative.AsyncStorage.setItem(\"location\", location);\n\n  _index.default.dispatch({\n    type: 'UPDATE_LOCATION',\n    payload: {\n      location: location\n    }\n  });\n}\n\nfunction setEmail(email) {\n  _reactNative.AsyncStorage.setItem(\"email\", email);\n\n  _index.default.dispatch({\n    type: 'UPDATE_EMAIL',\n    payload: {\n      email: email\n    }\n  });\n}\n\nfunction setUserId(userId) {\n  _reactNative.AsyncStorage.setItem(\"userId\", userId);\n\n  _index.default.dispatch({\n    type: 'UPDATE_USER_ID',\n    payload: {\n      userId: userId\n    }\n  });\n}\n\nfunction setImage(image) {\n  _reactNative.AsyncStorage.setItem(\"image\", image);\n\n  _index.default.dispatch({\n    type: 'UPDATE_IMAGE',\n    payload: {\n      image: image\n    }\n  });\n}\n\nfunction setProfileDescription(profileDescription) {\n  _reactNative.AsyncStorage.setItem(\"profileDescription\", profileDescription);\n\n  _index.default.dispatch({\n    type: 'UPDATE_PROFILE_DESCRIPTION',\n    payload: {\n      profileDescription: profileDescription\n    }\n  });\n}\n\nfunction RegisterPost(email, password, username, callback) {\n  fetch(_global.global.registerUrl, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password,\n      username: username\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    if (responseJson.success == true) {\n      callback({\n        success: true\n      });\n    } else {\n      callback({\n        success: false,\n        message: responseJson.message\n      });\n    }\n  }).catch(function (error) {\n    callback({\n      success: false\n    });\n  });\n}\n\nfunction Login(email, password, callback) {\n  fetch(_global.global.loginUrl, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    if (responseJson.success == true) {\n      setToken(responseJson.token);\n      setEmail(responseJson.email);\n      setUserId(responseJson.user);\n      setImage(responseJson.image);\n      setLocation(responseJson.location);\n      setUserName(responseJson.username);\n      setProfileDescription(responseJson.description);\n      callback({\n        success: true\n      });\n    } else {\n      callback({\n        success: false,\n        message: responseJson.message\n      });\n    }\n  }).catch(function (error) {\n    callback({\n      success: false\n    });\n  });\n}\n\nfunction verifyAccount(token, callback) {\n  fetch(_global.global.verifyToken, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'auth-token': token\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    if (responseJson.success == true) {\n      callback({\n        success: true\n      });\n    } else {\n      setToken(null);\n      callback({\n        success: false,\n        message: responseJson.message\n      });\n    }\n  }).catch(function (error) {\n    callback({\n      success: false\n    });\n  });\n}\n\nfunction updateProfile(location, description, token, callback) {\n  location = location ? location : \"\";\n  description = description ? description : \"\";\n  fetch(_global.global.updateProfileUrl, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'auth-token': token\n    },\n    body: JSON.stringify({\n      location: location,\n      profileDescription: description\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (responseJson) {\n    if (responseJson.success == true) {\n      setLocation(location);\n      setProfileDescription(description);\n      callback({\n        success: true\n      });\n    } else {\n      callback({\n        success: false,\n        message: responseJson.message\n      });\n    }\n  }).catch(function (error) {\n    callback({\n      success: false,\n      message: error + \"asdasd\"\n    });\n  });\n}\n\nfunction changeProfileImage(photo, token, callback) {\n  var data = new FormData();\n  data.append(\"photo\", {\n    name: photo.fileName,\n    type: photo.type,\n    uri: Platform.OS === \"android\" ? photo.uri : photo.uri.replace(\"file://\", \"\")\n  });\n  data.append('submit', \"ok\");\n  fetch(_global.global.changeProfileImage, {\n    method: \"POST\",\n    headers: {\n      'auth-token': token,\n      'Content-Type': 'multipart/form-data'\n    },\n    body: data\n  }).then(function (response) {\n    return response.json();\n  }).then(function (response) {\n    alert(\"Upload success!\");\n  }).catch(function (error) {\n    alert(\"Upload failed!\");\n  });\n}\n\n_reactNative.AsyncStorage.multiGet([\"token\", \"email\", \"username\", \"userId\", \"profileDescription\", \"location\", \"image\", \"country\"]).then(function (result) {\n  var token = result[0][1] === null || result[0][1] === \"\" ? null : result[0][1];\n  var email = result[1][1] === null ? null : result[1][1];\n  var username = result[2][1] === null ? null : result[2][1];\n  var userId = result[3][1] === null ? null : result[3][1];\n  var description = result[4][1] === null ? null : result[4][1];\n  var location = result[5][1] === null ? null : result[5][1];\n  var image = result[6][1] === null ? null : result[6][1];\n  var country = result[7][1] === null ? null : JSON.parse(result[7][1]);\n  setToken(token);\n  setEmail(email);\n  setUserName(username);\n  setUserId(userId);\n  setProfileDescription(description);\n  setLocation(location);\n  setImage(image);\n\n  if (country === null) {\n    setCountry({\n      \"id\": 2,\n      \"key\": \"england\",\n      \"name\": \"United Kingdom\",\n      \"img\": \"england.png\"\n    });\n  } else {\n    setCountry(country);\n  }\n});","map":{"version":3,"sources":["C:/Projeler/quitsmoking/src/state/actions/UserSession.js"],"names":["setCountry","country","AsyncStorage","setItem","JSON","stringify","toString","store","dispatch","type","payload","setToken","token","setUserName","username","setLocation","location","setEmail","email","setUserId","userId","setImage","image","setProfileDescription","profileDescription","RegisterPost","password","callback","fetch","global","registerUrl","method","headers","Accept","body","then","response","json","responseJson","success","message","catch","error","Login","loginUrl","user","description","verifyAccount","verifyToken","updateProfile","updateProfileUrl","changeProfileImage","photo","data","FormData","append","name","fileName","uri","Platform","OS","replace","alert","multiGet","result","parse"],"mappings":"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","sourcesContent":["import store from './../store/index';\r\nimport {AsyncStorage} from 'react-native';\r\nimport {setDate} from \"./UserInformation\";\r\n\r\n\r\nimport {global} from \"../../config/global\";\r\n\r\nexport function setCountry(country) {\r\n\r\n    AsyncStorage.setItem(\"country\",JSON.stringify(country).toString());\r\n    store.dispatch({\r\n        type: 'UPDATE_COUNTRY',\r\n        payload: {\r\n            country\r\n        }\r\n    })\r\n}\r\n\r\nexport function setToken(token) {\r\n    AsyncStorage.setItem(\"token\",token);\r\n    store.dispatch({\r\n        type: 'UPDATE_TOKEN',\r\n        payload: {\r\n            token\r\n        }\r\n    })\r\n}\r\nexport function setUserName(username) {\r\n    AsyncStorage.setItem(\"username\",username);\r\n    store.dispatch({\r\n        type: 'UPDATE_USERNAME',\r\n        payload: {\r\n            username\r\n        }\r\n    })\r\n}\r\nexport function setLocation(location) {\r\n    AsyncStorage.setItem(\"location\",location);\r\n    store.dispatch({\r\n        type: 'UPDATE_LOCATION',\r\n        payload: {\r\n            location\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function setEmail(email) {\r\n    AsyncStorage.setItem(\"email\",email);\r\n    store.dispatch({\r\n        type: 'UPDATE_EMAIL',\r\n        payload: {\r\n            email\r\n        }\r\n    });\r\n}\r\n\r\nexport function setUserId(userId) {\r\n    AsyncStorage.setItem(\"userId\",userId);\r\n    store.dispatch({\r\n        type: 'UPDATE_USER_ID',\r\n        payload: {\r\n            userId\r\n        }\r\n    })\r\n}\r\n\r\nexport function setImage(image) {\r\n    AsyncStorage.setItem(\"image\",image);\r\n    store.dispatch({\r\n        type: 'UPDATE_IMAGE',\r\n        payload: {\r\n            image\r\n        }\r\n    })\r\n}\r\n\r\nexport function setProfileDescription(profileDescription) {\r\n    AsyncStorage.setItem(\"profileDescription\",profileDescription);\r\n    store.dispatch({\r\n        type: 'UPDATE_PROFILE_DESCRIPTION',\r\n        payload: {\r\n            profileDescription\r\n        }\r\n    })\r\n}\r\n\r\nexport function RegisterPost(email,password,username,callback) {\r\n    fetch(global.registerUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email:email,\r\n            password: password,\r\n            username:username\r\n        })\r\n    }).then(response => response.json()).then(responseJson => {\r\n        if(responseJson.success == true) {\r\n            // setToken(responseJson.token);\r\n            // setEmail(responseJson.email);\r\n            // setUserId(responseJson.user);\r\n            // setImage(responseJson.image);\r\n            // setLocation(responseJson.location);\r\n            // setUserName(responseJson.username);\r\n            // setProfileDescription(responseJson.description);\r\n\r\n            callback({success:true});\r\n        } else {\r\n            callback({success:false,message:responseJson.message});\r\n        }\r\n    }).catch((error) => {\r\n        callback({success:false});\r\n    });\r\n}\r\n\r\nexport  function Login(email,password,callback) {\r\n    fetch(global.loginUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email:email,\r\n            password: password\r\n        })\r\n    }).then(response => response.json()).then(responseJson => {\r\n        if(responseJson.success == true) {\r\n            setToken(responseJson.token);\r\n            setEmail(responseJson.email);\r\n            setUserId(responseJson.user);\r\n            setImage(responseJson.image);\r\n            setLocation(responseJson.location);\r\n            setUserName(responseJson.username);\r\n            setProfileDescription(responseJson.description);\r\n\r\n            callback({success:true});\r\n        } else {\r\n            callback({success:false,message:responseJson.message});\r\n        }\r\n    }).catch((error) => {\r\n            callback({success:false});\r\n    });\r\n}\r\n\r\nexport function verifyAccount(token,callback) {\r\n    fetch(global.verifyToken, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'auth-token':token\r\n        },\r\n\r\n    }).then(response => response.json()).then(responseJson => {\r\n\r\n        if(responseJson.success == true) {\r\n            callback({success:true});\r\n        } else {\r\n            setToken(null);\r\n            callback({success:false,message:responseJson.message});\r\n        }\r\n    }).catch((error) => {\r\n\r\n        callback({success:false});\r\n    });\r\n\r\n}\r\n\r\n\r\nexport function updateProfile(location,description,token,callback){\r\n    location = location ? location:\"\";\r\n    description = description ? description : \"\";\r\n\r\n    fetch(global.updateProfileUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'auth-token':token\r\n        },\r\n        body: JSON.stringify({\r\n            location: location,\r\n            profileDescription: description,\r\n        })\r\n    }).then(response => response.json()).then(responseJson => {\r\n        if(responseJson.success == true) {\r\n            setLocation(location);\r\n            setProfileDescription(description);\r\n            callback({success:true});\r\n        } else {\r\n            callback({success:false,message:responseJson.message});\r\n        }\r\n    }).catch((error) => {\r\n        callback({success:false,message:error+\"asdasd\"});\r\n    });\r\n\r\n}\r\n\r\nexport function changeProfileImage(photo,token,callback) {\r\n    const data = new FormData();\r\n    data.append(\"photo\", {\r\n        name: photo.fileName,\r\n        type: photo.type,\r\n        uri: Platform.OS === \"android\" ? photo.uri : photo.uri.replace(\"file://\", \"\")\r\n\r\n    });\r\n    data.append('submit',\"ok\");\r\n\r\n\r\n    fetch(global.changeProfileImage, {\r\n        method: \"POST\",\r\n        headers : {\r\n            'auth-token' : token,\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n        body:data\r\n\r\n    })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            //console.log(\"upload succes\", response);\r\n            alert(\"Upload success!\");\r\n\r\n        })\r\n        .catch(error => {\r\n            //console.log(\"upload error\", error);\r\n            alert(\"Upload failed!\");\r\n        });\r\n}\r\n\r\nAsyncStorage.multiGet([\"token\",\"email\",\"username\",\"userId\",\"profileDescription\",\"location\",\"image\",\"country\"]).then((result)=>{\r\n    let token = (result[0][1] === null || result[0][1] === \"\") ? null : result[0][1];\r\n    let email = (result[1][1] === null) ? null : result[1][1];\r\n    let username = (result[2][1] === null) ? null : result[2][1];\r\n    let userId = (result[3][1] === null) ? null : result[3][1];\r\n    let description = (result[4][1] === null) ? null : result[4][1];\r\n    let location = (result[5][1] === null) ? null : result[5][1];\r\n    let image = (result[6][1] === null) ? null : result[6][1];\r\n    let country = (result[7][1] === null) ? null : JSON.parse(result[7][1]);\r\n    setToken(token);\r\n    setEmail(email);\r\n    setUserName(username);\r\n    setUserId(userId);\r\n    setProfileDescription(description);\r\n    setLocation(location);\r\n    setImage(image);\r\n    if(country === null) {\r\n        setCountry({\r\n            \"id\": 2,\r\n            \"key\":\"england\",\r\n            \"name\" : \"United Kingdom\",\r\n            \"img\" : \"england.png\"\r\n        });\r\n\r\n    }else {\r\n        setCountry(country);\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}