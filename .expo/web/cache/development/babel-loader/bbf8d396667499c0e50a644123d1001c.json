{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Box = _interopRequireDefault(require(\"../../components/UI/Box\"));\n\nvar _Text = _interopRequireDefault(require(\"../../components/UI/Text\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AchievementItem = _interopRequireDefault(require(\"../../components/CustomLists/AchievementItem\"));\n\nvar _AchievementsList = _interopRequireDefault(require(\"../../config/AchievementsList\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _18n = _interopRequireDefault(require(\"./../../lang/_18n\"));\n\nvar _jsxFileName = \"C:\\\\Projeler\\\\quitsmoking\\\\src\\\\screens\\\\Achievements\\\\AchievementsScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AchievementsScreen = function (_React$Component) {\n  (0, _inherits2.default)(AchievementsScreen, _React$Component);\n\n  var _super = _createSuper(AchievementsScreen);\n\n  function AchievementsScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AchievementsScreen);\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (_ref) {\n      var _this$props, _this$state;\n\n      var item = _ref.item,\n          index = _ref.index;\n      return _react.default.createElement(_AchievementItem.default, {\n        title: item.title,\n        achievement: item.achievement,\n        image: _AchievementsList.default.getImage(item.image),\n        time: item.time,\n        quitDate: (_this$props = _this.props) == null ? void 0 : _this$props.date,\n        now: (_this$state = _this.state) == null ? void 0 : _this$state.now,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      });\n    };\n\n    _this.state = {\n      Achievements: [],\n      now: new Date(Date.now()).getTime()\n    };\n\n    _this.props.navigation.setOptions({\n      headerTitle: _18n.default.t(\"mainpage.achievements\"),\n      headerStyle: {\n        backgroundColor: '#27ae60',\n        elevation: 0,\n        shadowOpacity: 0,\n        height: 45\n      },\n      headerTitleStyle: {\n        fontWeight: 'normal',\n        fontSize: 17,\n        alignSelf: 'center'\n      },\n      headerTintColor: '#fff',\n      headerRight: function headerRight() {\n        return _react.default.createElement(_Box.default, {\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_Text.default, {\n          px: 2,\n          color: \"white\",\n          fontSize: 13,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 26\n          }\n        }, _this.state.completedAchievement, \"/\", _this.state.achievementCount));\n      }\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(AchievementsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2,\n          _this$props3,\n          _this$props4,\n          _this$props5,\n          _this$props6,\n          _this2 = this;\n\n      this.props.navigation.addListener(\"focus\", function () {\n        _reactNative.StatusBar.setBarStyle('light-content');\n\n        _reactNative.StatusBar.setBackgroundColor(\"#27ae60\");\n      });\n      var List = new _AchievementsList.default((_this$props2 = this.props) == null ? void 0 : _this$props2.date, (_this$props3 = this.props) == null ? void 0 : _this$props3.smokingCountPerDay, (_this$props4 = this.props) == null ? void 0 : _this$props4.countCigaretteInPocket, (_this$props5 = this.props) == null ? void 0 : _this$props5.price, (_this$props6 = this.props) == null ? void 0 : _this$props6.currency);\n      var AList = List.getNotification();\n      var AchievementCount = AList.length;\n      var CompletedAchievement = 0;\n      AList.forEach(function (value) {\n        if (_this2.state.now - value.time > 0) {\n          CompletedAchievement = CompletedAchievement + 1;\n        }\n\n        ;\n      });\n      this.setState({\n        Achievements: AList,\n        completedAchievement: CompletedAchievement,\n        achievementCount: AchievementCount\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_Box.default, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.FlatList, {\n        data: this.state.Achievements,\n        renderItem: this._renderItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n  return AchievementsScreen;\n}(_react.default.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var ui = state.ui;\n  return {\n    date: ui.date,\n    wasteTime: ui.wasteTime,\n    smokingCountPerDay: ui.smokingCountPerDay,\n    countCigaretteInPocket: ui.countCigaretteInPocket,\n    price: ui.price,\n    currency: ui.currency\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps)(AchievementsScreen);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Projeler/quitsmoking/src/screens/Achievements/AchievementsScreen.js"],"names":["AchievementsScreen","props","_renderItem","item","index","title","achievement","AchievementsList","getImage","image","time","date","state","now","Achievements","Date","getTime","navigation","setOptions","headerTitle","I18n","t","headerStyle","backgroundColor","elevation","shadowOpacity","height","headerTitleStyle","fontWeight","fontSize","alignSelf","headerTintColor","headerRight","completedAchievement","achievementCount","addListener","StatusBar","setBarStyle","setBackgroundColor","List","smokingCountPerDay","countCigaretteInPocket","price","currency","AList","getNotification","AchievementCount","length","CompletedAchievement","forEach","value","setState","React","Component","mapStateToProps","ui","wasteTime"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IACMA,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACf,8BAAMA,KAAN;;AADe,UA6CnBC,WA7CmB,GA6CL,gBAAkB;AAAA;;AAAA,UAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,UAAXC,KAAW,QAAXA,KAAW;AAC5B,aACI,6BAAC,wBAAD;AACI,QAAA,KAAK,EAAED,IAAI,CAACE,KADhB;AAEI,QAAA,WAAW,EAAEF,IAAI,CAACG,WAFtB;AAGI,QAAA,KAAK,EAAIC,0BAAiBC,QAAjB,CAA0BL,IAAI,CAACM,KAA/B,CAHb;AAII,QAAA,IAAI,EAAIN,IAAI,CAACO,IAJjB;AAKI,QAAA,QAAQ,iBAAI,MAAKT,KAAT,qBAAI,YAAYU,IAL5B;AAMI,QAAA,GAAG,iBAAI,MAAKC,KAAT,qBAAI,YAAYC,GANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH,KAxDkB;;AAEf,UAAKD,KAAL,GAAa;AACTE,MAAAA,YAAY,EAAG,EADN;AAETD,MAAAA,GAAG,EAAI,IAAIE,IAAJ,CAASA,IAAI,CAACF,GAAL,EAAT,CAAD,CAAuBG,OAAvB;AAFG,KAAb;;AAKA,UAAKf,KAAL,CAAWgB,UAAX,CAAsBC,UAAtB,CAAiC;AACzBC,MAAAA,WAAW,EAACC,aAAKC,CAAL,CAAO,uBAAP,CADa;AAEzBC,MAAAA,WAAW,EAAG;AACVC,QAAAA,eAAe,EAAE,SADP;AAEVC,QAAAA,SAAS,EAAE,CAFD;AAGVC,QAAAA,aAAa,EAAE,CAHL;AAIVC,QAAAA,MAAM,EAAC;AAJG,OAFW;AAQzBC,MAAAA,gBAAgB,EAAE;AACdC,QAAAA,UAAU,EAAE,QADE;AAEdC,QAAAA,QAAQ,EAAC,EAFK;AAGdC,QAAAA,SAAS,EAAC;AAHI,OARO;AAazBC,MAAAA,eAAe,EAAE,MAbQ;AAczBC,MAAAA,WAAW,EAAE;AAAA,eACT,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,6BAAC,aAAD;AAAM,UAAA,EAAE,EAAE,CAAV;AAAa,UAAA,KAAK,EAAE,OAApB;AAA6B,UAAA,QAAQ,EAAE,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4C,MAAKpB,KAAL,CAAWqB,oBAAvD,OAA8E,MAAKrB,KAAL,CAAWsB,gBAAzF,CAAL,CADS;AAAA;AAdY,KAAjC;;AAPe;AA0BlB;;;;wCAEmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAChB,WAAKjC,KAAL,CAAWgB,UAAX,CAAsBkB,WAAtB,CAAkC,OAAlC,EAA0C,YAAM;AAC5CC,+BAAUC,WAAV,CAAsB,eAAtB;;AACAD,+BAAUE,kBAAV,CAA6B,SAA7B;AACH,OAHD;AAIA,UAAMC,IAAI,GAAG,IAAIhC,yBAAJ,iBAAqB,KAAKN,KAA1B,qBAAqB,aAAYU,IAAjC,kBAAsC,KAAKV,KAA3C,qBAAsC,aAAYuC,kBAAlD,kBAAqE,KAAKvC,KAA1E,qBAAqE,aAAYwC,sBAAjF,kBAAwG,KAAKxC,KAA7G,qBAAwG,aAAYyC,KAApH,kBAA0H,KAAKzC,KAA/H,qBAA0H,aAAY0C,QAAtI,CAAb;AACA,UAAIC,KAAK,GAAEL,IAAI,CAACM,eAAL,EAAX;AACA,UAAIC,gBAAgB,GAAIF,KAAK,CAACG,MAA9B;AACA,UAAIC,oBAAoB,GAAG,CAA3B;AACAJ,MAAAA,KAAK,CAACK,OAAN,CAAc,UAACC,KAAD,EAAW;AACrB,YAAI,MAAI,CAACtC,KAAL,CAAWC,GAAX,GAAiBqC,KAAK,CAACxC,IAAxB,GAAgC,CAAnC,EAAqC;AACjCsC,UAAAA,oBAAoB,GAAGA,oBAAoB,GAAE,CAA7C;AACH;;AAAA;AACJ,OAJD;AAKA,WAAKG,QAAL,CAAc;AAACrC,QAAAA,YAAY,EAAC8B,KAAd;AAAoBX,QAAAA,oBAAoB,EAACe,oBAAzC;AAA8Dd,QAAAA,gBAAgB,EAACY;AAA/E,OAAd;AACH;;;6BAeO;AACJ,aACI,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,6BAAC,qBAAD;AACI,QAAA,IAAI,EAAE,KAAKlC,KAAL,CAAWE,YADrB;AAEI,QAAA,UAAU,EAAE,KAAKZ,WAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAQH;;;EArE4BkD,eAAMC,S;;AAwEvC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAC1C,KAAD,EAAW;AAAA,MACxB2C,EADwB,GAClB3C,KADkB,CACxB2C,EADwB;AAE/B,SAAO;AACH5C,IAAAA,IAAI,EAAE4C,EAAE,CAAC5C,IADN;AAEH6C,IAAAA,SAAS,EAAED,EAAE,CAACC,SAFX;AAGHhB,IAAAA,kBAAkB,EAAEe,EAAE,CAACf,kBAHpB;AAIHC,IAAAA,sBAAsB,EAAEc,EAAE,CAACd,sBAJxB;AAKHC,IAAAA,KAAK,EAAEa,EAAE,CAACb,KALP;AAMHC,IAAAA,QAAQ,EAAEY,EAAE,CAACZ;AANV,GAAP;AAQH,CAVD;;eAYe,yBAAQW,eAAR,EAAyBtD,kBAAzB,C","sourcesContent":["import React from 'react'\r\nimport Box from \"../../components/UI/Box\";\r\nimport Text from \"../../components/UI/Text\";\r\nimport { FlatList, StatusBar} from \"react-native\";\r\nimport AchievementItem from \"../../components/CustomLists/AchievementItem\";\r\nimport AchievementsList from \"../../config/AchievementsList\";\r\nimport {connect} from \"react-redux\";\r\nimport I18n from \"./../../lang/_18n\";\r\nclass AchievementsScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Achievements : [],\r\n            now : (new Date(Date.now())).getTime(),\r\n\r\n        };\r\n        this.props.navigation.setOptions({\r\n                headerTitle:I18n.t(\"mainpage.achievements\"),\r\n                headerStyle : {\r\n                    backgroundColor: '#27ae60',\r\n                    elevation: 0,       //remove shadow on Android\r\n                    shadowOpacity: 0,\r\n                    height:45,\r\n                },\r\n                headerTitleStyle: {\r\n                    fontWeight: 'normal',\r\n                    fontSize:17,\r\n                    alignSelf:'center'\r\n                },\r\n                headerTintColor: '#fff',\r\n                headerRight :() => (\r\n                    <Box><Text px={2} color={\"white\"} fontSize={13}>{this.state.completedAchievement}/{this.state.achievementCount}</Text></Box>\r\n                )\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.navigation.addListener(\"focus\",() => {\r\n            StatusBar.setBarStyle('light-content');\r\n            StatusBar.setBackgroundColor(\"#27ae60\");\r\n        })\r\n        const List = new AchievementsList(this.props?.date,this.props?.smokingCountPerDay,this.props?.countCigaretteInPocket,this.props?.price,this.props?.currency);\r\n        let AList =List.getNotification()\r\n        let AchievementCount = (AList.length);\r\n        let CompletedAchievement = 0;\r\n        AList.forEach((value) => {\r\n            if((this.state.now - value.time) > 0){\r\n                CompletedAchievement = CompletedAchievement +1;\r\n            };\r\n        });\r\n        this.setState({Achievements:AList,completedAchievement:CompletedAchievement,achievementCount:AchievementCount})\r\n    }\r\n\r\n    _renderItem = ({item,index}) => {\r\n        return (\r\n            <AchievementItem\r\n                title={item.title}\r\n                achievement={item.achievement}\r\n                image = {AchievementsList.getImage(item.image)}\r\n                time = {item.time}\r\n                quitDate = {this.props?.date}\r\n                now = {this.state?.now}\r\n            />\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Box>\r\n                <FlatList\r\n                    data={this.state.Achievements}\r\n                    renderItem={this._renderItem}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {ui} = state;\r\n    return {\r\n        date: ui.date,\r\n        wasteTime: ui.wasteTime,\r\n        smokingCountPerDay: ui.smokingCountPerDay,\r\n        countCigaretteInPocket: ui.countCigaretteInPocket,\r\n        price: ui.price,\r\n        currency: ui.currency,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AchievementsScreen);\r\n"]},"metadata":{},"sourceType":"script"}