{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNativePushNotification = _interopRequireDefault(require(\"react-native-push-notification\"));\n\nvar _HealthConditions = require(\"./../config/HealthConditions\");\n\nvar _18n = _interopRequireDefault(require(\"./../lang/_18n\"));\n\nvar HealthNotifications = function HealthNotifications(_date) {\n  var _this = this;\n\n  (0, _classCallCheck2.default)(this, HealthNotifications);\n\n  this.sendTestNotification = function () {\n    _reactNativePushNotification.default.localNotificationSchedule({\n      message: \"this.props.date\",\n      date: new Date(Date.now() + 3 * 1000)\n    });\n  };\n\n  this.setScheduled = function () {\n    _this.cancelHealthNotification();\n\n    var date = new Date(_this.date).getTime();\n    var now = new Date(Date.now()).getTime();\n\n    _HealthConditions.HealthConditions.forEach(function (condition) {\n      var time = condition.time;\n      var diff = now - (time + date);\n\n      if (diff < 0) {\n        var pushDate = new Date(Date.now() + condition.time);\n\n        _reactNativePushNotification.default.localNotificationSchedule({\n          smallIcon: \"ic_launcher\",\n          largeIcon: \"ic_launcher\",\n          id: condition.id,\n          title: _18n.default.t(\"health.notification_title\"),\n          message: condition.condition,\n          group: \"health\",\n          date: new Date(date + condition.time)\n        });\n      }\n    });\n  };\n\n  this.cancelHealthNotification = function () {\n    _HealthConditions.HealthConditions.forEach(function (condition) {\n      _reactNativePushNotification.default.cancelLocalNotifications({\n        id: condition.id\n      });\n    });\n  };\n\n  this.date = _date;\n};\n\nvar _default = HealthNotifications;\nexports.default = _default;","map":{"version":3,"sources":["C:/Projeler/quitsmoking/src/utils/HealthNotifications.js"],"names":["HealthNotifications","date","sendTestNotification","PushNotification","localNotificationSchedule","message","Date","now","setScheduled","cancelHealthNotification","getTime","HealthConditions","forEach","condition","time","diff","pushDate","smallIcon","largeIcon","id","title","I18n","t","group","cancelLocalNotifications"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;IAEMA,mB,GACF,6BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,OAIlBC,oBAJkB,GAIK,YAAM;AACzBC,yCAAiBC,yBAAjB,CAA2C;AAEvCC,MAAAA,OAAO,EAAE,iBAF8B;AAGvCJ,MAAAA,IAAI,EAAE,IAAIK,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,IAAI,IAA1B;AAHiC,KAA3C;AAMH,GAXiB;;AAAA,OAalBC,YAbkB,GAaH,YAAM;AACjB,IAAA,KAAI,CAACC,wBAAL;;AACA,QAAIR,IAAI,GAAG,IAAIK,IAAJ,CAAS,KAAI,CAACL,IAAd,EAAoBS,OAApB,EAAX;AACA,QAAIH,GAAG,GAAI,IAAID,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAD,CAAuBG,OAAvB,EAAV;;AACAC,uCAAiBC,OAAjB,CAAyB,UAACC,SAAD,EAAe;AACpC,UAAIC,IAAI,GAAGD,SAAS,CAACC,IAArB;AACA,UAAIC,IAAI,GAAGR,GAAG,IAAIO,IAAI,GAACb,IAAT,CAAd;;AACA,UAAGc,IAAI,GAAG,CAAV,EAAc;AACV,YAAIC,QAAQ,GAAG,IAAIV,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAYM,SAAS,CAACC,IAA/B,CAAf;;AACAX,6CAAiBC,yBAAjB,CAA2C;AACvCa,UAAAA,SAAS,EAAG,aAD2B;AAEvCC,UAAAA,SAAS,EAAG,aAF2B;AAGvCC,UAAAA,EAAE,EAACN,SAAS,CAACM,EAH0B;AAIvCC,UAAAA,KAAK,EAAEC,aAAKC,CAAL,CAAO,2BAAP,CAJgC;AAKvCjB,UAAAA,OAAO,EAAEQ,SAAS,CAACA,SALoB;AAMvCU,UAAAA,KAAK,EAAG,QAN+B;AAOvCtB,UAAAA,IAAI,EAAE,IAAIK,IAAJ,CAASL,IAAI,GAAGY,SAAS,CAACC,IAA1B;AAPiC,SAA3C;AAUH;AACJ,KAhBD;AAiBH,GAlCiB;;AAAA,OAmClBL,wBAnCkB,GAmCS,YAAM;AAC7BE,uCAAiBC,OAAjB,CAAyB,UAACC,SAAD,EAAe;AACpCV,2CAAiBqB,wBAAjB,CAA0C;AAACL,QAAAA,EAAE,EAAEN,SAAS,CAACM;AAAf,OAA1C;AAEH,KAHD;AAIH,GAxCiB;;AACd,OAAKlB,IAAL,GAAYA,KAAZ;AACH,C;;eA0CWD,mB","sourcesContent":["\r\nimport React from 'react';\r\nimport PushNotification from \"react-native-push-notification\"\r\nimport {HealthConditions} from \"./../config/HealthConditions\";\r\nimport I18n from \"./../lang/_18n\"\r\n\r\nclass HealthNotifications{\r\n    constructor(date) {\r\n        this.date = date;\r\n    }\r\n\r\n    sendTestNotification = () => {\r\n        PushNotification.localNotificationSchedule({\r\n            //... You can use all the options from localNotifications\r\n            message: \"this.props.date\", // (required)\r\n            date: new Date(Date.now() + 3 * 1000), // in 60 secs\r\n        });\r\n\r\n    }\r\n\r\n    setScheduled = () => {\r\n        this.cancelHealthNotification()\r\n        let date = new Date(this.date).getTime();\r\n        let now = (new Date(Date.now())).getTime();\r\n        HealthConditions.forEach((condition) => {\r\n            let time = condition.time;\r\n            let diff = now - (time+date);\r\n            if(diff < 0 ) {\r\n                let pushDate = new Date(Date.now()+ condition.time);\r\n                PushNotification.localNotificationSchedule({\r\n                    smallIcon : \"ic_launcher\",\r\n                    largeIcon : \"ic_launcher\",\r\n                    id:condition.id,\r\n                    title: I18n.t(\"health.notification_title\"),\r\n                    message: condition.condition,\r\n                    group : \"health\",\r\n                    date: new Date(date + condition.time)\r\n                });\r\n                //console.log(\"kuruldu\");\r\n            }\r\n        })\r\n    }\r\n    cancelHealthNotification = () => {\r\n        HealthConditions.forEach((condition) => {\r\n            PushNotification.cancelLocalNotifications({id: condition.id});\r\n            //console.log(\"silinen\"+condition.id);\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default (HealthNotifications);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}